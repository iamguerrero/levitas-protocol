/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BVIXToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVIXToken__factory>;
    getContractFactory(
      name: "EVIXMintRedeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVIXMintRedeem__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "EVIXOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVIXOracle__factory>;
    getContractFactory(
      name: "EVIXToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVIXToken__factory>;
    getContractFactory(
      name: "MintRedeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintRedeem__factory>;
    getContractFactory(
      name: "MintRedeemV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintRedeemV2__factory>;
    getContractFactory(
      name: "MintRedeemWithCollateral",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintRedeemWithCollateral__factory>;
    getContractFactory(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUSDC__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BVIXToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BVIXToken>;
    getContractAt(
      name: "EVIXMintRedeem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EVIXMintRedeem>;
    getContractAt(
      name: "IOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "EVIXOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EVIXOracle>;
    getContractAt(
      name: "EVIXToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EVIXToken>;
    getContractAt(
      name: "MintRedeem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintRedeem>;
    getContractAt(
      name: "MintRedeemV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintRedeemV2>;
    getContractAt(
      name: "MintRedeemWithCollateral",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintRedeemWithCollateral>;
    getContractAt(
      name: "MockOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracle>;
    getContractAt(
      name: "MockUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUSDC>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "BVIXToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BVIXToken>;
    deployContract(
      name: "EVIXMintRedeem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVIXMintRedeem>;
    deployContract(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "EVIXOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVIXOracle>;
    deployContract(
      name: "EVIXToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVIXToken>;
    deployContract(
      name: "MintRedeem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintRedeem>;
    deployContract(
      name: "MintRedeemV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintRedeemV2>;
    deployContract(
      name: "MintRedeemWithCollateral",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintRedeemWithCollateral>;
    deployContract(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOracle>;
    deployContract(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSDC>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "BVIXToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BVIXToken>;
    deployContract(
      name: "EVIXMintRedeem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVIXMintRedeem>;
    deployContract(
      name: "IOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "EVIXOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVIXOracle>;
    deployContract(
      name: "EVIXToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVIXToken>;
    deployContract(
      name: "MintRedeem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintRedeem>;
    deployContract(
      name: "MintRedeemV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintRedeemV2>;
    deployContract(
      name: "MintRedeemWithCollateral",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintRedeemWithCollateral>;
    deployContract(
      name: "MockOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOracle>;
    deployContract(
      name: "MockUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSDC>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
